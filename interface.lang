module Main

import Inter (Add, Eq)

variant Vector2(T) {
    new(T, T)

    fun:(T (Add)) add(this, that : Vector2(T)) : Vector2(T) =
        match this { let .new(x1, y1) :
        match that { let .new(x2, y2) :
            Vector2::new(x1.add(x2), y1.add(y2))
        }}
}

fun add:( A (Add) ) (v : A, u : A) : A = v.add(u)

fun test1(u : Vector2(Inter::Bool) ) : Vector2(Inter::Bool) = u.add(u)

fun test2:(T (Eq), F) (x : T, b : F) : Inter::Bool = x.eq(x)

fun test3:(T (Add), U (Eq)) (f : fun(T) : U) : Inter::Bool = Inter::Bool::True

fun main() : Vector2(Inter::Bool) = (
    test3(Inter::Bool::True.add)

    test1(Vector2::new(Inter::Bool::True, Inter::Bool::False))
)

interface Eq1 t {
    fun eq(that : t) : Vector2(Inter::Bool)
}
