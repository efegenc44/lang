module Main

import TestModule
import Main

proc main() : Main::Nat {
    return id(foo(
        Nat::Succ(Nat::Succ(Nat::Zero)),
        Nat::Succ(Nat::Zero)
    ))
}

proc id:(T)(x : T) : T {
    return x
}

variant Nat {
    Zero
    Succ(Nat)

    proc add(this, that : Nat) : Nat {
        match that {
            Zero    : return this
            Succ(n) : return Nat::Succ(this.add(n))
        }
    }

    proc mul(this, that : Nat) : Nat {
        match that {
            Zero    : return Nat::Zero
            Succ(n) : return this.add(this.mul(n))
        }
    }
}

proc foo(x : Nat, y : Nat) : Nat {
    return x
        .add(y)
        .mul(Nat::Succ(Nat::Succ(Nat::Succ(Nat::Zero))))
}
