module Main

import Nat

variant List(T) {
    Nil
    Cons(T, List(T))

    proc map(this, f: proc(T) : T) : List(T) {
        match this {
            Nil         : return List::Nil
            Cons(x, xs) : return List::Cons(f(x), xs.map(f))
        }
    }

    proc foo(this, y : T) : T {
        List::Nil

        match this {
            Nil         : return y
            Cons(x, xs) : return x
        }
    }
}

variant Cell(C) {
    Cell(C)

    proc get(this) : C {
        match this {
            Cell(c) : return c
        }
    }
}

proc deneme:(T)() : List(T) {
    return List::Nil
}

proc test(x : List(Foo)) : List(Foo) {
    return List::Cons(Foo::Foo, List::Nil)
}

proc bar(list : List(Foo)) : Foo {
    match list {
        Nil         : return Foo::Foo
        Cons(x, xs) : return x
    }
}

proc foo(list : List(Foo)) : Foo {
    return list.foo(Foo::Foo)
}

variant Foo { Foo }

proc main() : List(Nat::Nat) {
    return List::Cons(Nat::Nat::Succ(Nat::Nat::Zero), List::Nil)
        .map(Nat::inc)
}