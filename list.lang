module Main

import Numbers (Nat)

variant List(T) {
    Nil
    Cons(T, List(T))

    fun map(this, f: fun(T) : T) : List(T) = match this {
        let .Nil         : List::Nil
        let .Cons(x, xs) : List::Cons(f(x), xs.map(f))
    }

    fun foo(this, y : T) : T = (
        List::Nil

        match this {
            let .Nil         : y
            let .Cons(x, xs) : x
        }
    )
}

variant Cell(C) {
    Cell(C)

    fun get(this) : C = match this {
        let .Cell(c) : c
    }
}

fun deneme:(T)() : List(T) = List::Nil

fun test(x : List(Foo)) : List(Foo) =
    List::Cons(Foo::Foo, List::Nil)

fun bar(list : List(Foo)) : Foo = match list {
    let .Nil         : Foo::Foo
    let .Cons(x, xs) : x
}

fun foo(list : List(Foo)) : Foo = list.foo(Foo::Foo)

variant Foo { Foo }

fun main() : List(Nat::Nat) =
    List::Cons(Nat::Nat::Succ(Nat::Nat::Zero), List::Nil)
        .map(Nat::inc)