module Main

import Inter

variant Unit {
    Unit

    proc add(this, that : Unit) : Unit {
        return that
    }

    proc eq(this, that : Unit) : Inter::Bool {
        return Inter::Bool::True
    }
}

variant Unit2 { Unit2 }

proc f:(T (Inter::Add))(x : T) : T {
    return x
}

proc g:(T (Inter::Eq))(x : T) : T {
    return x
}

proc main() : Unit {
    return let id = proc(x) x in (
        id(Unit2::Unit2)
        id(Unit::Unit)
    )

    return (proc(x) (g(x) f(x) x.add(x)))(Unit::Unit)
}